{"version":3,"sources":["utils/duration/index.js","pomodoro/ActiveDisplay.js","pomodoro/Duration.js","pomodoro/PlayPause.js","utils/class-names/index.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","secondsToDuration","givenSeconds","seconds","round","ActiveDisplay","props","timeModeMaster","mode","focusCurrent","breakCurrent","focusCount","breakCount","updateBar","console","log","className","data-testid","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","Duration","setTimeModeMaster","isTimerRunning","focusChange","focusMin","focusMax","breakMin","breakMax","breakChange","btnHandler","type","update","onClick","disabled","PlayPause","classNameToBoolean","playPause","setIsTimerRunning","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","Pomodoro","useState","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","prevState","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26a34c32.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\n\nexport default function ActiveDisplay(props) {\n    const { timeModeMaster } = props;\n    const { mode, focusCurrent, breakCurrent, focusCount, breakCount } = timeModeMaster;\n\n    let updateBar = 0\n    \n\n    if (mode === 'Focus') {\n        let bar = (focusCount/(focusCurrent*60))*100;\n        updateBar = 100 - bar\n    }else{\n        let bar = (breakCount/(breakCurrent*60))*100;\n        updateBar = 100 - bar\n    }\nconsole.log(updateBar)\n    if(mode === 'Initial'){\n        return null\n    } else {\n        return (\n            <div>\n                {/* TODO: This area should show only display when a focus or break session is running or pauses */}\n                <div className=\"row mb-2\">\n                    <div className=\"col\">\n                        {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n                        <h2 data-testid=\"session-title\">\n                           {mode === 'Focus' ? \n                           `Focusing for ${minutesToDuration(focusCurrent)} minutes`\n                           : `On Break for ${minutesToDuration(breakCurrent)} minutes`} \n                        </h2>\n                        {/* TODO: Update message below to include time remaining in the current session */}\n                        <p className=\"lead\" data-testid=\"session-sub-title\">\n                            {mode === 'Focus' ? \n                            `${secondsToDuration(focusCount)} remaining`\n                            : `${secondsToDuration(breakCount)} remaining`}\n                        </p>\n                    </div>\n                </div>\n                <div className=\"row mb-2\">\n                    <div className=\"col\">\n                        <div className=\"progress\" style={{ height: \"20px\" }}>\n                        <div\n                            className=\"progress-bar\"\n                            role=\"progressbar\"\n                            aria-valuemin=\"0\"\n                            aria-valuemax=\"100\"\n                            aria-valuenow={updateBar} // TODO: Increase aria-valuenow as elapsed time increases\n                            style={{ width: `${updateBar}%` }} // TODO: Increase width % as elapsed time increases\n                        />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { minutesToDuration } from '../utils/duration/index';\n\nexport default function Duration(props){\n    const { \n        timeModeMaster, \n        setTimeModeMaster, \n        isTimerRunning\n    } = props;\n    const { \n        focusCurrent, \n        breakCurrent, \n        focusChange, \n        focusMin, \n        focusMax, \n        breakMin, \n        breakMax, \n        breakChange \n    } = timeModeMaster;\n\n    const btnHandler = (type) => {\n        if(type === 'fMinus'){\n            if(focusCurrent > focusMin && focusCurrent <= focusMax){\n                const update = focusCurrent - focusChange;\n                setTimeModeMaster({...timeModeMaster, focusCurrent: update, focusCount: update * 60 });\n            }\n        }\n        if(type === 'fPlus'){\n            if(focusCurrent >= focusMin && focusCurrent < focusMax){\n                const update = focusCurrent + focusChange;\n                setTimeModeMaster({...timeModeMaster, focusCurrent: update, focusCount: update * 60 });\n            }\n\n        }\n        if(type === 'bMinus'){\n            if(breakCurrent > breakMin && breakCurrent <= breakMax){\n                const update = breakCurrent - breakChange;\n                setTimeModeMaster({...timeModeMaster, breakCurrent: update, breakCount: update * 60 });\n            }\n        }\n        if(type === 'bPlus'){\n            if(breakCurrent >= breakMin && breakCurrent < breakMax){\n                const update = breakCurrent + breakChange;\n                setTimeModeMaster({...timeModeMaster, breakCurrent: update, breakCount: update * 60 });\n            }\n        }\n    }\n\n    return (\n        <div className=\"row\">\n            <div className=\"col\">\n            <div className=\"input-group input-group-lg mb-2\">\n                <span className=\"input-group-text\" data-testid=\"duration-focus\">\n                    Focus Duration: {minutesToDuration(focusCurrent)}\n                </span>\n                <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n                <button\n                    type=\"button\"\n                    className=\"btn btn-secondary\"\n                    data-testid=\"decrease-focus\"\n                    onClick={() => btnHandler('fMinus')}\n                    disabled={isTimerRunning}\n                >\n                    <span className=\"oi oi-minus\" />\n                </button>\n                {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n                <button\n                    type=\"button\"\n                    className=\"btn btn-secondary\"\n                    data-testid=\"increase-focus\"\n                    onClick={() => btnHandler('fPlus')}\n                    disabled={isTimerRunning}\n                >\n                    <span className=\"oi oi-plus\" />\n                </button>\n                </div>\n            </div>\n            </div>\n            <div className=\"col\">\n            <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n                <span className=\"input-group-text\" data-testid=\"duration-break\">\n                    Break Duration: {minutesToDuration(breakCurrent)}\n                </span>\n                <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                <button\n                    type=\"button\"\n                    className=\"btn btn-secondary\"\n                    data-testid=\"decrease-break\"\n                    onClick={() => btnHandler('bMinus')}\n                    disabled={isTimerRunning}\n                >\n                    <span className=\"oi oi-minus\" />\n                </button>\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n                <button\n                    type=\"button\"\n                    className=\"btn btn-secondary\"\n                    data-testid=\"increase-break\"\n                    onClick={() => btnHandler('bPlus')}\n                    disabled={isTimerRunning}\n                >\n                    <span className=\"oi oi-plus\" />\n                </button>\n                </div>\n            </div>\n            </div>\n        </div>\n      </div>\n    );\n}","import React from 'react';\nimport classNames from \"../utils/class-names\";\n\nexport default function PlayPause(props) {\n  const { playPause, isTimerRunning, timeModeMaster, setTimeModeMaster, setIsTimerRunning } = props;\n  const { mode } = timeModeMaster\n\n  function stopHandler() {\n    setIsTimerRunning(false)\n    setTimeModeMaster({\n      ...timeModeMaster,\n      mode: 'Initial', \n      focusCurrent: 25, \n      breakCurrent: 5,\n      focusCount: 25*60,\n      breakCount: 5*60,\n    })\n  }\n\n  return(\n    <div className=\"row\">\n      <div className=\"col\">\n        <div\n          className=\"btn-group btn-group-lg mb-2\"\n          role=\"group\"\n          aria-label=\"Timer controls\"\n        >\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            data-testid=\"play-pause\"\n            title=\"Start or pause timer\"\n            onClick={playPause}\n            >\n            <span\n                className={classNames({\n                oi: true,\n                \"oi-media-play\": !isTimerRunning,\n                \"oi-media-pause\": isTimerRunning,\n                })}\n            />\n          </button>\n              {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            title=\"Stop the session\"\n            onClick={stopHandler}\n            disabled={mode !== 'Focus'}\n            >\n            <span className=\"oi oi-media-stop\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport ActiveDisplay from \"./ActiveDisplay\";\nimport Duration from \"./Duration\";\nimport PlayPause from \"./PlayPause\";\n\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [timeModeMaster, setTimeModeMaster] = useState({\n    focusCurrent: 25,\n    focusMin: 5,\n    focusMax: 60,\n    focusChange: 5,\n    focusCount: 25*60,\n    breakCurrent: 5,\n    breakMin: 1,\n    breakMax: 15,\n    breakChange: 1,\n    breakCount: 5*60,\n    mode: 'Initial',\n  });\n\n  const { focusCurrent, focusCount, breakCurrent, breakCount, mode } = timeModeMaster;\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      if(focusCount === 0){\n        setTimeModeMaster({...timeModeMaster, focusCount: focusCurrent * 60, mode: 'Break'});\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n      } else if(breakCount === 0){\n        setTimeModeMaster({...timeModeMaster, breakCount: breakCurrent * 60, mode: 'Focus'});\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n      } else if(mode === 'Focus'){\n        setTimeModeMaster({...timeModeMaster, focusCount: focusCount - 1});\n      } else if(mode === 'Break'){\n        setTimeModeMaster({...timeModeMaster, breakCount: breakCount - 1});\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState)\n    setTimeModeMaster({...timeModeMaster, mode: 'Focus'});\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <Duration \n        isTimerRunning={isTimerRunning} \n        timeModeMaster={timeModeMaster}\n        setTimeModeMaster={setTimeModeMaster}\n        />\n      <PlayPause \n        playPause={playPause} \n        timeModeMaster={timeModeMaster} \n        isTimerRunning={isTimerRunning}\n        setTimeModeMaster={setTimeModeMaster}\n        setIsTimerRunning={setIsTimerRunning}\n        />\n      <ActiveDisplay timeModeMaster={timeModeMaster}/>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}