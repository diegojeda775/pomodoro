{"ast":null,"code":"var _jsxFileName = \"/Users/diegoojeda/Desktop/www/Project_Pomodoro_Timer/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport ActiveDisplay from \"./ActiveDisplay\";\nimport Duration from \"./Duration\";\nimport PlayPause from \"./PlayPause\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [timeModeMaster, setTimeModeMaster] = useState({\n    focusCurrent: 25,\n    focusMin: 5,\n    focusMax: 60,\n    focusChange: 5,\n    focusCount: 25 * 60,\n    breakCurrent: 5,\n    breakMin: 1,\n    breakMax: 15,\n    breakChange: 1,\n    breakCount: 5 * 60,\n    mode: 'Initial'\n  });\n  const {\n    focusCurrent,\n    focusCount,\n    breakCurrent,\n    breakCount,\n    mode\n  } = timeModeMaster;\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    if (focusCount === 0) {\n      setTimeModeMaster({ ...timeModeMaster,\n        focusCount: focusCurrent * 60,\n        mode: 'Break'\n      });\n      new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n    }\n\n    if (breakCount === 0) {\n      setTimeModeMaster({ ...timeModeMaster,\n        breakCount: breakCurrent * 60,\n        mode: 'Focus'\n      });\n      new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n    }\n\n    if (mode === 'Focus') {\n      setTimeModeMaster({ ...timeModeMaster,\n        focusCount: focusCount - 1\n      });\n    }\n\n    if (mode === 'Break') {\n      setTimeModeMaster({ ...timeModeMaster,\n        breakCount: breakCount - 1\n      });\n    }\n  }, isTimerRunning ? 100 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n    setTimeModeMaster({ ...timeModeMaster,\n      mode: 'Focus'\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Duration, {\n    isTimerRunning: isTimerRunning,\n    timeModeMaster: timeModeMaster,\n    setTimeModeMaster: setTimeModeMaster,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayPause, {\n    playPause: playPause,\n    timeModeMaster: timeModeMaster,\n    isTimerRunning: isTimerRunning,\n    setTimeModeMaster: setTimeModeMaster,\n    setIsTimerRunning: setIsTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ActiveDisplay, {\n    timeModeMaster: timeModeMaster,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/diegoojeda/Desktop/www/Project_Pomodoro_Timer/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","ActiveDisplay","Duration","PlayPause","Pomodoro","isTimerRunning","setIsTimerRunning","timeModeMaster","setTimeModeMaster","focusCurrent","focusMin","focusMax","focusChange","focusCount","breakCurrent","breakMin","breakMax","breakChange","breakCount","mode","Audio","play","playPause","prevState"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport ActiveDisplay from \"./ActiveDisplay\";\nimport Duration from \"./Duration\";\nimport PlayPause from \"./PlayPause\";\n\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [timeModeMaster, setTimeModeMaster] = useState({\n    focusCurrent: 25,\n    focusMin: 5,\n    focusMax: 60,\n    focusChange: 5,\n    focusCount: 25*60,\n    breakCurrent: 5,\n    breakMin: 1,\n    breakMax: 15,\n    breakChange: 1,\n    breakCount: 5*60,\n    mode: 'Initial',\n  });\n\n  const { focusCurrent, focusCount, breakCurrent, breakCount, mode } = timeModeMaster;\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      if(focusCount === 0){\n        setTimeModeMaster({...timeModeMaster, focusCount: focusCurrent * 60, mode: 'Break'});\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n      }\n\n      if(breakCount === 0){\n        setTimeModeMaster({...timeModeMaster, breakCount: breakCurrent * 60, mode: 'Focus'});\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n      }\n\n      if(mode === 'Focus'){\n        setTimeModeMaster({...timeModeMaster, focusCount: focusCount - 1});\n      }\n\n      if(mode === 'Break'){\n        setTimeModeMaster({...timeModeMaster, breakCount: breakCount - 1});\n      }\n    },\n    isTimerRunning ? 100 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState)\n    setTimeModeMaster({...timeModeMaster, mode: 'Focus'});\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <Duration \n        isTimerRunning={isTimerRunning} \n        timeModeMaster={timeModeMaster}\n        setTimeModeMaster={setTimeModeMaster}\n        />\n      <PlayPause \n        playPause={playPause} \n        timeModeMaster={timeModeMaster} \n        isTimerRunning={isTimerRunning}\n        setTimeModeMaster={setTimeModeMaster}\n        setIsTimerRunning={setIsTimerRunning}\n        />\n      <ActiveDisplay timeModeMaster={timeModeMaster}/>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}