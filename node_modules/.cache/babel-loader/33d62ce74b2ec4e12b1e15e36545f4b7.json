{"ast":null,"code":"var _jsxFileName = \"/Users/diegoojeda/Desktop/www/Project_Pomodoro_Timer/src/pomodoro/ActiveDisplay.js\";\nimport React from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\nexport default function ActiveDisplay(props) {\n  const {\n    timeModeMaster\n  } = props;\n  const {\n    mode,\n    focusCurrent,\n    breakCurrent,\n    focusCount,\n    breakCount\n  } = timeModeMaster;\n  let updateBar = 0;\n\n  if (mode === 'Focus') {\n    let bar = focusCount / (focusCurrent * 100) * 100;\n    updateBar = 100 - bar;\n  } else {\n    let bar = breakCount / (breakCurrent * 100) * 100;\n    updateBar = 100 - bar;\n  }\n\n  if (mode === 'Initial') {\n    return null;\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 25\n      }\n    }, mode === 'Focus' ? `Focusing for ${minutesToDuration(focusCurrent)} minutes` : `On Break for ${minutesToDuration(breakCurrent)} minutes`), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }\n    }, mode === 'Focus' ? `${secondsToDuration(focusCount)} remaining` : `${secondsToDuration(breakCount)} remaining`))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": \"2\" // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: `2`\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }\n    })))));\n  }\n}","map":{"version":3,"sources":["/Users/diegoojeda/Desktop/www/Project_Pomodoro_Timer/src/pomodoro/ActiveDisplay.js"],"names":["React","minutesToDuration","secondsToDuration","ActiveDisplay","props","timeModeMaster","mode","focusCurrent","breakCurrent","focusCount","breakCount","updateBar","bar","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAqBD,KAA3B;AACA,QAAM;AAAEE,IAAAA,IAAF;AAAQC,IAAAA,YAAR;AAAsBC,IAAAA,YAAtB;AAAoCC,IAAAA,UAApC;AAAgDC,IAAAA;AAAhD,MAA+DL,cAArE;AAEA,MAAIM,SAAS,GAAG,CAAhB;;AAGA,MAAIL,IAAI,KAAK,OAAb,EAAsB;AAClB,QAAIM,GAAG,GAAIH,UAAU,IAAEF,YAAY,GAAC,GAAf,CAAX,GAAgC,GAA1C;AACAI,IAAAA,SAAS,GAAG,MAAMC,GAAlB;AACH,GAHD,MAGK;AACD,QAAIA,GAAG,GAAIF,UAAU,IAAEF,YAAY,GAAC,GAAf,CAAX,GAAgC,GAA1C;AACAG,IAAAA,SAAS,GAAG,MAAMC,GAAlB;AACH;;AAED,MAAGN,IAAI,KAAK,SAAZ,EAAsB;AAClB,WAAO,IAAP;AACH,GAFD,MAEO;AACH,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIA,IAAI,KAAK,OAAT,GACA,gBAAeL,iBAAiB,CAACM,YAAD,CAAe,UAD/C,GAEE,gBAAeN,iBAAiB,CAACO,YAAD,CAAe,UAHrD,CAFJ,eAQI;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKF,IAAI,KAAK,OAAT,GACA,GAAEJ,iBAAiB,CAACO,UAAD,CAAa,YADhC,GAEE,GAAEP,iBAAiB,CAACQ,UAAD,CAAa,YAHvC,CARJ,CADJ,CAFJ,eAkBI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEG,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AACI,MAAA,SAAS,EAAC,cADd;AAEI,MAAA,IAAI,EAAC,aAFT;AAGI,uBAAc,GAHlB;AAII,uBAAc,KAJlB;AAKI,uBAAc,GALlB,CAKsB;AALtB;AAMI,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAG;AAAV,OANX,CAM2B;AAN3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADJ,CADJ,CAlBJ,CADJ;AAmCH;AACJ","sourcesContent":["import React from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\n\nexport default function ActiveDisplay(props) {\n    const { timeModeMaster } = props;\n    const { mode, focusCurrent, breakCurrent, focusCount, breakCount } = timeModeMaster;\n\n    let updateBar = 0\n    \n\n    if (mode === 'Focus') {\n        let bar = (focusCount/(focusCurrent*100))*100;\n        updateBar = 100 - bar\n    }else{\n        let bar = (breakCount/(breakCurrent*100))*100;\n        updateBar = 100 - bar\n    }\n\n    if(mode === 'Initial'){\n        return null\n    } else {\n        return (\n            <div>\n                {/* TODO: This area should show only display when a focus or break session is running or pauses */}\n                <div className=\"row mb-2\">\n                    <div className=\"col\">\n                        {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n                        <h2 data-testid=\"session-title\">\n                           {mode === 'Focus' ? \n                           `Focusing for ${minutesToDuration(focusCurrent)} minutes`\n                           : `On Break for ${minutesToDuration(breakCurrent)} minutes`} \n                        </h2>\n                        {/* TODO: Update message below to include time remaining in the current session */}\n                        <p className=\"lead\" data-testid=\"session-sub-title\">\n                            {mode === 'Focus' ? \n                            `${secondsToDuration(focusCount)} remaining`\n                            : `${secondsToDuration(breakCount)} remaining`}\n                        </p>\n                    </div>\n                </div>\n                <div className=\"row mb-2\">\n                    <div className=\"col\">\n                        <div className=\"progress\" style={{ height: \"20px\" }}>\n                        <div\n                            className=\"progress-bar\"\n                            role=\"progressbar\"\n                            aria-valuemin=\"0\"\n                            aria-valuemax=\"100\"\n                            aria-valuenow='2' // TODO: Increase aria-valuenow as elapsed time increases\n                            style={{ width: `2` }} // TODO: Increase width % as elapsed time increases\n                        />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}