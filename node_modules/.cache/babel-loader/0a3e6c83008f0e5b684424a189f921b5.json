{"ast":null,"code":"var _jsxFileName = \"/Users/diegoojeda/Desktop/www/Project_Pomodoro_Timer/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport ActiveDisplay from \"./ActiveDisplay\";\nimport Duration from \"./Duration\";\nimport PlayPause from \"./PlayPause\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  // const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [timeModeMaster, setTimeModeMaster] = useState({\n    focusCurrent: 25,\n    focusMin: 5,\n    focusMax: 60,\n    focusIncrement: 5,\n    // focusCount: 25*60,\n    breakCurrent: 5,\n    breakMin: 1,\n    breakMax: 15,\n    breakIncrement: 1,\n    // breakCount: 5*60,\n    mode: 'Focus',\n    isRunning: false\n  });\n  useInterval(() => {// ToDo: Implement what should happen when the timer is running\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Duration, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayPause, {\n    playpause: playPause,\n    timeModeMaster: timeModeMaster,\n    setTimeModeMaster: setTimeModeMaster,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ActiveDisplay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/diegoojeda/Desktop/www/Project_Pomodoro_Timer/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","ActiveDisplay","Duration","PlayPause","Pomodoro","timeModeMaster","setTimeModeMaster","focusCurrent","focusMin","focusMax","focusIncrement","breakCurrent","breakMin","breakMax","breakIncrement","mode","isRunning","isTimerRunning","playPause","setIsTimerRunning","prevState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAGA,SAASC,QAAT,GAAoB;AAClB;AACA;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC;AACnDQ,IAAAA,YAAY,EAAE,EADqC;AAEnDC,IAAAA,QAAQ,EAAE,CAFyC;AAGnDC,IAAAA,QAAQ,EAAE,EAHyC;AAInDC,IAAAA,cAAc,EAAE,CAJmC;AAKnD;AACAC,IAAAA,YAAY,EAAE,CANqC;AAOnDC,IAAAA,QAAQ,EAAE,CAPyC;AAQnDC,IAAAA,QAAQ,EAAE,EARyC;AASnDC,IAAAA,cAAc,EAAE,CATmC;AAUnD;AACAC,IAAAA,IAAI,EAAE,OAX6C;AAYnDC,IAAAA,SAAS,EAAE;AAZwC,GAAD,CAApD;AAeAhB,EAAAA,WAAW,CACT,MAAM,CACJ;AACD,GAHQ,EAITiB,cAAc,GAAG,IAAH,GAAU,IAJf,CAAX;;AAOA,WAASC,SAAT,GAAqB;AACnBC,IAAAA,iBAAiB,CAAEC,SAAD,IAAe,CAACA,SAAjB,CAAjB;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEF,SAAtB;AAAiC,IAAA,cAAc,EAAEb,cAAjD;AAAiE,IAAA,iBAAiB,EAAEC,iBAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD;;AAED,eAAeF,QAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport useInterval from \"../utils/useInterval\";\nimport ActiveDisplay from \"./ActiveDisplay\";\nimport Duration from \"./Duration\";\nimport PlayPause from \"./PlayPause\";\n\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  // const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [timeModeMaster, setTimeModeMaster] = useState({\n    focusCurrent: 25,\n    focusMin: 5,\n    focusMax: 60,\n    focusIncrement: 5,\n    // focusCount: 25*60,\n    breakCurrent: 5,\n    breakMin: 1,\n    breakMax: 15,\n    breakIncrement: 1,\n    // breakCount: 5*60,\n    mode: 'Focus',\n    isRunning: false\n  });\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <Duration />\n      <PlayPause playpause={playPause} timeModeMaster={timeModeMaster} setTimeModeMaster={setTimeModeMaster}/>\n      <ActiveDisplay />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}